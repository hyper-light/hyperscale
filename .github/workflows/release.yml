# This is a basic workflow to help you get started with Actions

name: Publish to PyPi

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - pyproject.toml
  pull_request:
    branches: [ main ]
    paths:
      - pyproject.toml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_OS: "bookworm"
  PYTHON_VERSION: "3.13"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish_to_pypi:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'
    - name: Install pypa/setuptools
      run: >-
        python -m
        pip install wheel build setuptools
    - name: Build a binary wheel
      run: >-
        python -m build
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  
  build_hyperscale_image_base:
    needs: [ "publish_to_pypi" ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: docker/images/Dockerfile
        tags: hyperlightorg/hyperscale:latest
        build-args: |
          VERSION=${{env.PYTHON_VERSION}}
          BASE=${{env.IMAGE_OS}}
